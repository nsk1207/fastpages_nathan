{
  
    
        "post0": {
            "title": "Personal API + Basics",
            "content": "Python, RapidAPI Terms . APIs and tooling like Jupyter docs allows many opportunities in fields like Data Science. As more and more developers use APIs, they build standards in how you setup a client, send requests and receive information... . Covid19 RapidAPI Example . To begin the API journey. You need to find an API provider. . RapidAPI is a great option. You must setup and account, but there are many free options. | Goto this page for starters, the Corona virus World and India data- Under Code Snippets pick Python - Requests | . RapidAPI, you will select Python Requests type of code to work with you Notebook. . The url is the endpoint to which the API is directed | The headers is a dictionary data structure to send special messaging to the endpoint | The requests.request() python function is used to send a request and retrieve their responses | The response variable receives result of of the request in JSON text | . Next step, is to format the response according to your data science needs . &quot;&quot;&quot; Requests is a HTTP library for the Python programming language. The goal of the project is to make HTTP requests simpler and more human-friendly. &quot;&quot;&quot; import requests &quot;&quot;&quot; RapidAPI is the world&#39;s largest API Marketplace. Developers use Rapid API to discover and connect to thousands of APIs. &quot;&quot;&quot; url = &quot;https://corona-virus-world-and-india-data.p.rapidapi.com/api&quot; headers = { &#39;x-rapidapi-key&#39;: &quot;26d9a3c8fbmshd1c8fc32ca8acc3p190a69jsn54f737b8e33b&quot;, &#39;x-rapidapi-host&#39;: &quot;corona-virus-world-and-india-data.p.rapidapi.com&quot; } # Request Covid Data response = requests.request(&quot;GET&quot;, url, headers=headers) # print(response.text) # uncomment this line to see raw data # This code looks for &quot;world data&quot; print(&quot;World Totals&quot;) world = response.json().get(&#39;world_total&#39;) # turn response to json() so we can extract &quot;world_total&quot; for key, value in world.items(): # this finds key, value pairs in country print(key, value) print() # This code looks for USA in &quot;countries_stats&quot; print(&quot;Country Totals&quot;) countries = response.json().get(&#39;countries_stat&#39;) for country in countries: # countries is a list if country[&quot;country_name&quot;] == &quot;USA&quot;: # this filters for USA for key, value in country.items(): # this finds key, value pairs in country print(key, value) . World Totals total_cases 509,268,964 new_cases 204,268 total_deaths 6,242,509 new_deaths 630 total_recovered 461,827,849 active_cases 41,198,606 serious_critical 42,510 total_cases_per_1m_population 65,334 deaths_per_1m_population 800.9 statistic_taken_at 2022-04-24 11:18:01 Country Totals country_name USA cases 82,649,779 deaths 1,018,316 region total_recovered 80,434,925 new_deaths 0 new_cases 0 serious_critical 1,465 active_cases 1,196,538 total_cases_per_1m_population 247,080 deaths_per_1m_population 3,044 total_tests 1,000,275,726 tests_per_1m_population 2,990,303 . Digital Coin Example . This example provides digital coin feedback (ie Bitcoin). It include popularity, price, symbols, etc. . A valid X-RapidAPI-Key is required. Look in code for link to RapidAPI page | Read all comments in code for further guidance | . # RapidAPI page https://rapidapi.com/Coinranking/api/coinranking1/ # Begin Rapid API Code import requests url = &quot;https://coinranking1.p.rapidapi.com/coins&quot; querystring = {&quot;referenceCurrencyUuid&quot;:&quot;yhjMzLPhuIDl&quot;,&quot;timePeriod&quot;:&quot;24h&quot;,&quot;tiers[0]&quot;:&quot;1&quot;,&quot;orderBy&quot;:&quot;marketCap&quot;,&quot;orderDirection&quot;:&quot;desc&quot;,&quot;limit&quot;:&quot;50&quot;,&quot;offset&quot;:&quot;0&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;jcmbea0fa2ff5msh7f14bf69be38ca6p175482jsn6c4988114560&quot;, # place your key here &quot;X-RapidAPI-Host&quot;: &quot;coinranking1.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(response.text) # End Rapid API Code json = response.json() # convert response to python json object # Observe data from an API. This is how data transports over the internet in a &quot;JSON&quot; text form # - The JSON &quot;text&quot; is formed in dictionary {} and list [] divisions # - To read the result, Data Scientist of Developer converts JSON into human readable form # - Review the first line, look for the keys -- &quot;status&quot; and &quot;data&quot; . {&#34;message&#34;:&#34;You are not subscribed to this API.&#34;} . Formatting Digital Coin example . JSON text transferred from the API in the previous cell was converted to a Python Dictionary called json. The &quot;coins&quot; in the dictionary contain a list of the most relevant data. Look at the code and comments to see how the original text is turned into something understandable. Additionally, there are error check to make sure we are starting the code with the expectation that the API was run correctly. . &quot;&quot;&quot; This cell is dependent on valid run of API above. - try and except code is making sure &quot;json&quot; was properly run above - inside second try is code that is used to process Coin API data Note. Run this cell repeatedly to format data without re-activating API &quot;&quot;&quot; try: print(&quot;JSON data is Python type: &quot; + str(type(json))) try: # Extracting Coins JSON status, if the API worked status = json.get(&#39;status&#39;) print(&quot;API status: &quot; + status) print() # Extracting Coins JSON data, data about the coins data = json.get(&#39;data&#39;) # Procedural abstraction of Print code for coins def print_coin(c): print(c[&quot;symbol&quot;], c[&quot;price&quot;]) print(&quot;Icon Url: &quot; + c[&quot;iconUrl&quot;]) print(&quot;Rank Url: &quot; + c[&quot;coinrankingUrl&quot;]) # Coins data was observed to be a list for coin in data[&#39;coins&#39;]: print_coin(coin) print() except: print(&quot;Did you insert a valid key in X-RapidAPI-Key of API cell above?&quot;) print(json) except: print(&quot;This cell is dependent on running API call in cell above!&quot;) . JSON data is Python type: &lt;class &#39;dict&#39;&gt; Did you insert a valid key in X-RapidAPI-Key of API cell above? {&#39;message&#39;: &#39;You are not subscribed to this API.&#39;} . Go deeper into APIs . Web Development vs Jupyter Notebook. A notebook is certainly a great place to start. But, for your end of Trimester project we want you to build the skill to reference and use APIs within your Project. Here are some resources to get you started with this journey. . In the Nighthawk Coders APCSP you can find an Overview and Examples using APIs:APCSP APIs menu- Using Covid RapidAPI JavaScript frontend API code in APCSP Fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-rapidapi.md | . | Making a Jokes API (this will next API tech talk) Frontend. JavaScript frontend code in APCSP fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-jokes.md | Backend Endpoints. Python code that allows Frontend access: https://github.com/nighthawkcoders/flask_portfolio/blob/main/api.py | Backend Jokes Management. Python code that support Create, Read, Update, Delete (CRUD): https://github.com/nighthawkcoders/flask_portfolio/blob/main/model_jokes.py | . | . Hacks . Find and use an API as part of your project. An API and a little coding logic will be a big step toward getting meaningful data for a project. There are many API providers, find one that might work for your project to complete this hack. When picking an API you are looking for something that will work with either JavaScript Fetch or Python Request. Here are some samples, these are not qualified in any way. . RapidAPI- GitHub Project | No Key APIs Article | Twitter Developer | Google Developer | Reddit Developer | . Show API and format results in either Web Page or Jupyter Notebook. Ultimately, I will expect that we do APIs in backend (Python/Flask). However, for this Hack you can pick your preference. We will discuss pros and cons in next API tech talk. . My Personal API (Weather) . from curses.ascii import US from parso import split_lines import requests url = &quot;https://weatherbit-v1-mashape.p.rapidapi.com/forecast/3hourly&quot; querystring = {&quot;lat&quot;:&quot;35.5&quot;,&quot;lon&quot;:&quot;-78.5&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;26d9a3c8fbmshd1c8fc32ca8acc3p190a69jsn54f737b8e33b&quot;, &quot;X-RapidAPI-Host&quot;: &quot;weatherbit-v1-mashape.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) # print(response.text) print(&quot;Weather&quot;) weathers = response.json().get(&#39;data&#39;) for weather in weathers: # weathers is a list if weather[&quot;wind_cdir&quot;] == &quot;N&quot;: # this filters for N for key, value in weather.items(): # this finds key, value pairs in country print(key, value) . Weather wind_cdir N rh 51 pod d pres 1014 clouds 25 vis 36.896 wind_spd 3.88 snow_depth 0 wind_cdir_full north slp 1022 datetime 2022-10-08:18 ts 1665252000 dewpt 9.5 uv 4.7 wind_dir 4 ghi 739.78 dhi 112.16 ozone 286.8 clouds_hi 100 weather {&#39;description&#39;: &#39;Scattered clouds&#39;, &#39;code&#39;: 802, &#39;icon&#39;: &#39;c02d&#39;} clouds_low 11 temp 19.9 app_temp 19.3 timestamp_utc 2022-10-08T18:00:00 timestamp_local 2022-10-08T14:00:00 snow 0 wind_gust_spd 4.71 solar_rad 733.805 precip 0 pop 0 dni 882.97 clouds_mid 0 wind_cdir N rh 90 pod n pres 1015 clouds 100 vis 3.8 wind_spd 1.88 snow_depth 0 wind_cdir_full north slp 1022 datetime 2022-10-10:09 ts 1665392400 dewpt 13.2 uv 0 wind_dir 10 ghi 0 dhi 0 ozone 287.3 clouds_hi 13 weather {&#39;description&#39;: &#39;Light shower rain&#39;, &#39;code&#39;: 520, &#39;icon&#39;: &#39;r04n&#39;} clouds_low 100 temp 14.8 app_temp 14.8 timestamp_utc 2022-10-10T09:00:00 timestamp_local 2022-10-10T05:00:00 snow 0 wind_gust_spd 3.32 solar_rad 0 precip 2.8787613 pop 80 dni 0 clouds_mid 100 .",
            "url": "https://nsk1207.github.io/fastpages_nathan/2022/10/03/PBL-python_rapidapi.html",
            "relUrl": "/2022/10/03/PBL-python_rapidapi.html",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Number Generator",
            "content": "Click me . Here is your number! .",
            "url": "https://nsk1207.github.io/fastpages_nathan/week5/markdown/2022/09/29/randomgenerator.html",
            "relUrl": "/week5/markdown/2022/09/29/randomgenerator.html",
            "date": " • Sep 29, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Personal Java Script",
            "content": "Even and Odd numbers . function IsOdd(x){ if (x % 2 == 0) { console.log(x + &quot; is an even number&quot;); } else { console.log(x + &quot; is an odd number&quot;); } } IsOdd(94) . 94 is an even number . Time Teller . var today = new Date(); var date = today.getFullYear()+&#39;-&#39;+(today.getMonth()+1)+&#39;-&#39;+today.getDate(); var time = today.getHours() + &quot;:&quot; + today.getMinutes() + &quot;:&quot; + today.getSeconds(); var dateTime = date+&#39; &#39;+time; console.log(dateTime) . 2022-9-26 21:30:4 .",
            "url": "https://nsk1207.github.io/fastpages_nathan/week5/jupyter/2022/09/26/javapersonal.html",
            "relUrl": "/week5/jupyter/2022/09/26/javapersonal.html",
            "date": " • Sep 26, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Unit 1.2, 1.3",
            "content": "Collegeboard Unit 1.2 Notes + Quiz . Categories of innnovations: Applications (games, social media, etc.), Physical Devices (phones, computers, etc.), and Systems (E-commerce, E-mail, cloud services) | Computer Programs accept input in many ways (touch, audio, visual, text) | Many programs are written in an event driven environement | “Events” are triggered by some action, which usually sends input to the program | Input usually affects the output | What is a program? A program is a collection of statements. A statement is a single command. A group of statements is called a code segment. Code segments are executed according to the rules of the programming language. | . Screenshot of completed Collegeboard Quiz . . Collegeboard Unit 1.3 Notes . How programs are developed: Starts with an idea, then programs are developed with a specific purpose, then developers follow specific steps and stick to their plan | Developers start investigating the problem/purpose and reflect | Developers must determine the requirments of the program | understand the contraints | understand the user concerns and interests | | How do developers investigate? surverys | user testing | interviews | direct observations | | Developers design the program by: brainstorming (draw on investigation) | planning user experience | laying out the user interface | organizing into modules | | prgram development is almost never a solo endeavor (work with your team) | When does documentation happen? at the beginning: list specifications | during: to keep track of process | after: to explain the overall process | | documentation throughout can improve efficiency of overall programming process + programmers’ ability to test and refine the program | .",
            "url": "https://nsk1207.github.io/fastpages_nathan/week5/markdown/2022/09/25/unit1.2.html",
            "relUrl": "/week5/markdown/2022/09/25/unit1.2.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Group Planning for Project + Agile Methodology",
            "content": "Roles . Our team was split up like this: . 1) Scrum Master: Max – organize scrum board and make sures framework is followed and is facilitating the scrum . 2) Backend Developer: Nathan – build and maintain the technology that that powers all the work behind the scenes . 3) Devops: Alyssa – starts with tools/processes needed for coding and deployment to maintenance and updates. . 4) Frontend Developer: Sri – builds front end portion of the app (works the interactive and visual part of the design) . “Agile Methodology Diagram” that our group created . . Drafting a Plan for the Final Project (Group Ideas) . One idea for the project would be a platform that consists of multiple apps (games)(maybe 3 to 4, something similiar to game pigeon). The games would take user input and it would also need algorithms to shoot basketballs, arrows, etc. This app would teach our team many different skills in programming. In addition, it will take our interest for 8 weeks due to the vast tasks that need to be completed. . Our Team Roles: . Frontend Developer: create the visual images of games on the screen | Backend Developer: create algortihims behind the scenes | Dev Ops: make sure website functions correctly | Scrum Master: faciliate the team and assign each member differnet goals, while also helping the frontend and backend developers | . Because apps like game pigeon already exist, this project may or may not be able to used outside of class. . Finally, the project is good for the Create Performance Task because it incorporates all the different College Board requirments. .",
            "url": "https://nsk1207.github.io/fastpages_nathan/week5/markdown/2022/09/25/scrum.html",
            "relUrl": "/week5/markdown/2022/09/25/scrum.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Java Script",
            "content": "Console.log output . console.log(&quot;Hello, World!&quot;); . Hello, World! . Console.log output showing use of variable . var msg = &quot;Hello, World!&quot;; console.log(msg); . Hello, World! . Console.log output with function use . function logIt(output) { console.log(output); } logIt(msg); . Hello, World! . Showing reuse of a function . console.log(&quot;Reuse&quot;) logIt(&quot;Hello, World!&quot;); . Reuse Hello, World! . Dynamic or loosely typed language (string,number) . function logItType(output) { console.log(typeof output, &quot;;&quot;, output); } console.log(&quot;Dynamic language&quot;) logItType(&quot;Hello, World!&quot;); logItType(2022); logItType([1, 2, 3]); . Dynamic language string ; Hello, World! number ; 2022 object ; [ 1, 2, 3 ] . Building a person function + JSON . function Person(name, ghID, classOf) { this.name = name; this.ghID = ghID; this.classOf = classOf; this.role = &quot;&quot;; } Person.prototype.setRole = function(role) { this.role = role; } Person.prototype.toJSON = function() { const obj = {name: this.name, ghID: this.ghID, classOf: this.classOf, role: this.role}; const json = JSON.stringify(obj); return json; } var teacher = new Person(&quot;Mr Mortenson&quot;, &quot;jm1021&quot;, 1977); logItType(teacher); logItType(teacher.toJSON()); teacher.setRole(&quot;Teacher&quot;); logItType(teacher); logItType(teacher.toJSON()); . object ; Person { name: &#39;Mr Mortenson&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;&#39; } string ; {&#34;name&#34;:&#34;Mr Mortenson&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;&#34;} object ; Person { name: &#39;Mr Mortenson&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;Teacher&#39; } string ; {&#34;name&#34;:&#34;Mr Mortenson&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;Teacher&#34;} . Array/list of people + JSON . var students = [ new Person(&quot;Nathan&quot;, &quot;nsk1207&quot;, 2024), new Person(&quot;Max&quot;, &quot;mmaxwu&quot;, 2024), new Person(&quot;Sri&quot;, &quot;SRIHITAKOTT123&quot;, 2024), new Person(&quot;Alyssa&quot;, &quot;alyssar60819&quot;, 2024), ]; function Classroom(teacher, students){ teacher.setRole(&quot;Teacher&quot;); this.teacher = teacher; this.classroom = [teacher]; this.students = students; this.students.forEach(student =&gt; { student.setRole(&quot;Student&quot;); this.classroom.push(student); }); this.json = []; this.classroom.forEach(person =&gt; this.json.push(person.toJSON())); } compsci = new Classroom(teacher, students); logItType(compsci.classroom); logItType(compsci.classroom[0].name); logItType(compsci.json[0]); logItType(JSON.parse(compsci.json[0])); . object ; [ Person { name: &#39;Mr Mortenson&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;Teacher&#39; }, Person { name: &#39;Nathan&#39;, ghID: &#39;nsk1207&#39;, classOf: 2024, role: &#39;Student&#39; }, Person { name: &#39;Max&#39;, ghID: &#39;mmaxwu&#39;, classOf: 2024, role: &#39;Student&#39; }, Person { name: &#39;Sri&#39;, ghID: &#39;SRIHITAKOTT123&#39;, classOf: 2024, role: &#39;Student&#39; }, Person { name: &#39;Alyssa&#39;, ghID: &#39;alyssar60819&#39;, classOf: 2024, role: &#39;Student&#39; } ] string ; Mr Mortenson string ; {&#34;name&#34;:&#34;Mr Mortenson&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;Teacher&#34;} object ; { name: &#39;Mr Mortenson&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;Teacher&#39; } . Building A Table (Java using toHTML) . Classroom.prototype._toHtml = function() { var style = ( &quot;display:inline-block;&quot; + &quot;border: 2px solid black;&quot; + &quot;box-shadow: 0.8em 0.4em 0.4em green;&quot; ); var body = &quot;&quot;; body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Name&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;GitHub ID&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Class Of&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Role&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; for (var row of compsci.classroom) { body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.ghID + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.classOf + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.role + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.role + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;tr&gt;&quot;; } return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; // IJavaScript HTML processor receive parameter of defined HTML fragment $$.html(compsci._toHtml()); . NameGitHub IDClass OfRole . Mr Mortenson | jm1021 | 1977 | Teacher | Teacher | Nathan | nsk1207 | 2024 | Student | Student | Max | mmaxwu | 2024 | Student | Student | Sri | SRIHITAKOTT123 | 2024 | Student | Student | Alyssa | alyssar60819 | 2024 | Student | Student | &lt;/table&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . .",
            "url": "https://nsk1207.github.io/fastpages_nathan/week5/jupyter/2022/09/24/javascript.html",
            "relUrl": "/week5/jupyter/2022/09/24/javascript.html",
            "date": " • Sep 24, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "AppLab Ideas",
            "content": "Plan for quiz on applab (multiplication quiz) . In my quiz, I want to try to have an infinite amount of questions by using the random number block of code. In addition, I plan on adding sound effects when getting a question right and wrong. I want to add three pages on app lab: Start screen, quiz screen, and a result screen. In my result screen, I want to add a final score thing (something out of something, for example). I would start by defining all my variables at the top, then creating my functions of code. . step 1: defining all variables (var) | step 2: creating functions for showing questions, showing results, etc. | step 3: create on-event code that will display the home screen, allow for user input such as clicking the start button, and creating a correct/wrong counter. | step 4: using the random number command, create infinite amount of multiplication questions | step 5: create code that will let user click to finish quiz or return to home screen and reset all stats | . Success in quiz . easy to understand | easy to navigate as a whole | simple | . Challenges in quiz . . creating two different on event functions within the same function got pretty complicated at one point and I had to be really careful | . Link: . Quiz | .",
            "url": "https://nsk1207.github.io/fastpages_nathan/week3/markdown/2022/09/20/ideas.html",
            "relUrl": "/week3/markdown/2022/09/20/ideas.html",
            "date": " • Sep 20, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Notes from “Psychology and the Good Life” + Collegeboard Collaboration hacks",
            "content": "Notes from the video . Having a social life is really important | Making time for some gratitude | Have healthier practices (sleep habits, eating habits, etc) | Controlling life can be hard, live in the momement | . Our Team Infographic from the video . . Collegeboard Collabortion Video Notes . collabortion = new ideas (super mario brothers 2 and 3, for example) | divsere perspective + less bias in the development of computing innovations | pair programming: two programmers working together in pairs. There is a driver who writes program code, while the other (the observer, pointer, or navigator) reviews each line of program code as it is typed in | think-pair-share: students think through a problem alone, pair with a partner to share ideas, then share results with class | communication is important | . MCQ Score proof . .",
            "url": "https://nsk1207.github.io/fastpages_nathan/week4/markdown/2022/09/17/psychology.html",
            "relUrl": "/week4/markdown/2022/09/17/psychology.html",
            "date": " • Sep 17, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Performance Task Planning + Notes for AP Exam",
            "content": "Performance Task Idea 1: . Calculator that solves systems of equations . Program Purpose and Function . For my trimester project, I want to try and create a graphing calculator that will help people graph and solve system of equations. When the user inputs numbers into the equations, the computer will output results with the intersecting coordinates and graph. . Data Abstraction . The coding in this project will consist of mostly data and storing it through code. I want about 5-10 differnent graph types on my app. I have to limit the input that a person can give, so it is easier for the code to create two intersecting graphs. . Managing Complexity . The main objective of the app is to compare the user input in a system of equations and real calculators that show you the intersection points of functions. There will be multiple types of graphs the user can ask the app to draw, and will create complexity as it compares multiple graphs together. . Procedural Abstraction . The procedure is having data stored with the person’s input. Then the results of the program would match their equations with a graph. I might call this part graph abstraction, and I will include multiple parameters such as whether if they want a quadratic and linear, a linear and linear, etc. . Algorithm Implementation . The algorithm will be based on their choice of equations. Different graphs will be chosen based on the users input, and the graphs would be iteration. However, I would need to learn algorithims. . Testing . The testing will be done with a brief explanation and video. . Review of “How I got a 5, by Bria”: . Here are a few notes I jotted down while reading about Bria’s tips that will help me succeed on the AP Exam (5): . watch Khan Academy videos | practice the practice tests like the real thing because the real thing is going to be similar | cite all sources that are not yours | review previous college board scoring examples | review scoring guidelines | .",
            "url": "https://nsk1207.github.io/fastpages_nathan/week3/markdown/2022/09/11/performancetask.html",
            "relUrl": "/week3/markdown/2022/09/11/performancetask.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Theme Change",
            "content": "Theme Change . . Issues . Top bar missing (about me, tags, search, etc.) | Bottom links are missing (link to github, twitter, etc.) | My added vocab page also went missing | Overall format looked kinda bad | .",
            "url": "https://nsk1207.github.io/fastpages_nathan/week2/markdown/2022/09/05/colorchange.html",
            "relUrl": "/week2/markdown/2022/09/05/colorchange.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "APCSP - Quiz with List and Dictionary",
            "content": "I created questions for two subjects (math and history). The append command does this. . import getpass, sys SubjectList = [&quot;Math&quot;, &quot;History&quot;] QandA = [] # math QandA.append({ &quot;What is 10 times 14?&quot;: &quot;140&quot;, &quot;What is 3 times 8?&quot;: &quot;24&quot;, &quot;What is 10 divided by 2?&quot;: &quot;5&quot;, &quot;What is 20 times 6?&quot;: &quot;120&quot;, &quot;What is 4 times 15?&quot;: &quot;60&quot; }) # history QandA.append({ &quot;When did the Civil War start?&quot;: &quot;1861&quot;, &quot;Who was the first president?&quot;: &quot;George Washington&quot; }) . The first loop is for the two subjects, and the second loop is the questions themselves. This code gives the question (key) and checks the answer (value). . def question_with_response(prompt): print(&quot;Question &quot; + &quot;: &quot; + prompt) msg = input() return msg # ask questions and check answers def for_loop_index(): scores = [0 , 0] # subject index s = 0 for subject in QandA: print(&quot; nSubject: &quot; + SubjectList[s]) for ques, ans in subject.items(): #print(ques, ans) rsp = question_with_response(ques) if rsp == ans: print(rsp + &quot; is correct!&quot;) scores[s] += 1 else: print(rsp + &quot; is incorrect!&quot;) # subject index increase s += 1 print() print(&quot;Correct answers in &quot; + SubjectList[0] + &quot;: &quot; + str(scores[0]) + &quot; out of &quot; + str(len(QandA[0]))) print(&quot;Correct answers in &quot; + SubjectList[1] + &quot;: &quot; + str(scores[1]) + &quot; out of &quot; + str(len(QandA[1]))) return . This code gives a question and answer into the math section at the start with input. Here, the user can make their own question and answer and it will create a new, temporary dictionary that will later be added to the math subject (0). . print(&quot;Please add a questions in Math&quot;) newq = input() print(&quot;Please add corresponding answer&quot;) newa = input() print(&quot;You provided &quot; + newq + &quot; and &quot; + newa) #add new question and answer temp_dict = {newq: newa} QandA[0].update(temp_dict) . Please add a questions in Math Please add corresponding answer You provided What is 10x6? and 60 . This code starts the quiz. It also adds the math question previously created by the user into the quiz. It shows the score at the bottom after all questions are answered. . print(&#39;Hello everyone!, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) print(&quot;Let&#39;s see how smart you are! Ready to take a quiz?&quot;) for_loop_index() . Hello everyone!, nsk1207 running /home/nsk1207/anaconda3/bin/python Let&#39;s see how smart you are! Ready to take a quiz? Subject: Math Question : What is 10 times 14? 140 is correct! Question : What is 3 times 8? 24 is correct! Question : What is 10 divided by 2? 5 is correct! Question : What is 20 times 6? 120 is correct! Question : What is 4 times 15? 50 is incorrect! Question : What is 10x6? 1861 is incorrect! Subject: History Question : When did the Civil War start? George Washington is incorrect! Question : Who was the first president? 1861 is incorrect! Correct answers in Math: 4 out of 6 Correct answers in History: 0 out of 2 .",
            "url": "https://nsk1207.github.io/fastpages_nathan/week2/jupyter/2022/09/04/list_dict_quiz.html",
            "relUrl": "/week2/jupyter/2022/09/04/list_dict_quiz.html",
            "date": " • Sep 4, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "APCSP - List and Dictionary Basics",
            "content": "List and Dictionary Basics . Lists and Dictionaries Our society is being build on information. List and Dictionaries are used to collect information. Mostly, when information is collected it is formed into patterns. As that pattern is established you will collect many instances of that pattern. . List is used to collect many Dictionary is used to define data patterns. Iteration is often used to process through lists. To start exploring more deeply into List, Dictionary and Iteration we will explore constructing a List of people and cars. . I created 4 dictionaries within my list. . InfoDb = [] # InfoDB is a data structure with expected Keys and Values # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;Nathan&quot;, &quot;LastName&quot;: &quot;Kim&quot;, &quot;DOB&quot;: &quot;December 7&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;nathank51687@stu.powayusd.com&quot;, &quot;Hobbies&quot;: [&quot;Grinding SAT&quot;, &quot;Listening to Music&quot;, &quot;Watching TV&quot;] }) # Append to List a 2nd Dictionary of key/values InfoDb.append({ &quot;FirstName&quot;: &quot;Max&quot;, &quot;LastName&quot;: &quot;Wu&quot;, &quot;DOB&quot;: &quot;January 12&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;mwu@powayusd.com&quot;, &quot;Hobbies&quot;: [&quot;Watching TV&quot;, &quot;Listening to Music&quot;, &quot;Hockey&quot;] }) # Append to List a 3rd Dictionary of key/values InfoDb.append({ &quot;FirstName&quot;: &quot;Bob&quot;, &quot;LastName&quot;: &quot;Bobby&quot;, &quot;DOB&quot;: &quot;January 10&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;bbobby@powayusd.com&quot;, &quot;Hobbies&quot;: [&quot;Biking&quot;, &quot;Eating&quot;, &quot;Walking&quot;] }) # Append to List a 3rd Dictionary of key/values InfoDb.append({ &quot;FirstName&quot;: &quot;Robert&quot;, &quot;LastName&quot;: &quot;Lee&quot;, &quot;DOB&quot;: &quot;February 11&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;asmith@powayusd.com&quot;, &quot;Hobbies&quot;: [&quot;Biking&quot;, &quot;Eating&quot;, &quot;Walking&quot;] }) . How I printed my dictionary content. . #print(InfoDb) # print function: given a dictionary of InfoDb content def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Hobbies: &quot;, end=&quot;&quot;) # end=&quot;&quot; make sure no return occurs print(&quot;, &quot;.join(d_rec[&quot;Hobbies&quot;])) # join allows printing a string list with separator print() . I tried 3 different methods of printing with for loop, while loop, and for loop with index. . def for_loop(): print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) for_loop() # while loop algorithm contains an initial n and an index incrementing statement (n += 1) def while_loop(): print(&quot;While loop output n&quot;) i = 0 while i &lt; len(InfoDb): record = InfoDb[i] print_data(record) i += 1 return while_loop() # for loop with index def for_loop_index(): print(&quot;For loop with index output n&quot;) for i in range(0, len(InfoDb), 1): record = InfoDb[i] print_data(record) return for_loop_index() . For loop output Nathan Kim Residence: San Diego Birth Day: December 7 Hobbies: Grinding SAT, Listening to Music, Watching TV Max Wu Residence: San Diego Birth Day: January 12 Hobbies: Watching TV, Listening to Music, Hockey Bob Bobby Residence: San Diego Birth Day: January 10 Hobbies: Biking, Eating, Walking Robert Lee Residence: San Diego Birth Day: February 11 Hobbies: Biking, Eating, Walking While loop output Nathan Kim Residence: San Diego Birth Day: December 7 Hobbies: Grinding SAT, Listening to Music, Watching TV Max Wu Residence: San Diego Birth Day: January 12 Hobbies: Watching TV, Listening to Music, Hockey Bob Bobby Residence: San Diego Birth Day: January 10 Hobbies: Biking, Eating, Walking Robert Lee Residence: San Diego Birth Day: February 11 Hobbies: Biking, Eating, Walking For loop with index output Nathan Kim Residence: San Diego Birth Day: December 7 Hobbies: Grinding SAT, Listening to Music, Watching TV Max Wu Residence: San Diego Birth Day: January 12 Hobbies: Watching TV, Listening to Music, Hockey Bob Bobby Residence: San Diego Birth Day: January 10 Hobbies: Biking, Eating, Walking Robert Lee Residence: San Diego Birth Day: February 11 Hobbies: Biking, Eating, Walking . I also printed in reverse order. . def for_loop_index_reverse(): print(&quot;Reverse order n&quot;) for i in range(len(InfoDb)-1, -1, -1): record = InfoDb[i] print_data(record) return for_loop_index_reverse() . Reverse order Robert Lee Residence: San Diego Birth Day: February 11 Hobbies: Biking, Eating, Walking Bob Bobby Residence: San Diego Birth Day: January 10 Hobbies: Biking, Eating, Walking Max Wu Residence: San Diego Birth Day: January 12 Hobbies: Watching TV, Listening to Music, Skating Nathan Kim Residence: San Diego Birth Day: December 7 Hobbies: Grinding SAT, Listening to Music, Watching TV .",
            "url": "https://nsk1207.github.io/fastpages_nathan/week2/jupyter/2022/09/04/list_dict_basics.html",
            "relUrl": "/week2/jupyter/2022/09/04/list_dict_basics.html",
            "date": " • Sep 4, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Notes",
            "content": "&#9997; . Notes from each week of CSP :) . Studious &#128511; Week Notes Hacks 0 | This week, I learned how to use the basic tools of VSCODE and github. I also learned how to create my first markdown and jupyter notebook pages on my blog. Week 0 Hacks | 1 | This week, I learned how to check my bash tools, and created my own quiz with python. I added my own cool features like a score counter! In addition, I added another markdown page with links to my other classes. Week 1 Hacks 2 | This week, I learned how to use list, dictionaries, and iteration, and created my own quiz using them! In addition, I learned how to add gifs into my about me section, along with tables, links, and more. Week 2 Hacks 3 | This week, I learned how to create my own quiz in Code.org. I added my own special touches (with the help of my partner) and I also wrote a creative performance task. Week 3 Hacks | | . | | . | | . | . .",
            "url": "https://nsk1207.github.io/fastpages_nathan/week2/markdown/2022/09/04/Experimental.html",
            "relUrl": "/week2/markdown/2022/09/04/Experimental.html",
            "date": " • Sep 4, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "APCSP - Bash Tool Check",
            "content": "Python Version Check . python --version python2 --version . Python 3.9.12 Python 2.7.18rc1 . Conda Package Check . conda list . # packages in environment at /home/nsk1207/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39h06a4308_1 _libgcc_mutex 0.1 main _openmp_mutex 4.5 1_gnu aiohttp 3.8.1 py39h7f8727e_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39h06a4308_0 anaconda-navigator 2.1.4 py39h06a4308_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39h06a4308_0 appdirs 1.4.4 pyhd3eb1b0_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39h7f8727e_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39h06a4308_0 astropy 5.0.4 py39hce1f21e_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.7.2 pypi_0 pypi bcrypt 3.2.0 py39he8ac12f_0 beautifulsoup4 4.11.1 py39h06a4308_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39h7f8727e_0 bkcharts 0.2 py39h06a4308_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h8c45485_0 bokeh 2.4.2 py39h06a4308_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39hce1f21e_0 brotli 1.0.9 he6710b0_2 brotlipy 0.7.0 py39h27cfd23_1003 brunsli 0.1 h2531618_0 bzip2 1.0.8 h7b6447c_0 c-ares 1.18.1 h7f8727e_0 ca-certificates 2022.3.29 h06a4308_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39h06a4308_2 cffi 1.15.0 py39hd667e15_1 cfitsio 3.470 hf0d0db6_6 chardet 4.0.0 py39h06a4308_1003 charls 2.2.0 h2531618_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39h06a4308_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39h06a4308_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.13.0 py39h06a4308_0 conda-build 3.21.8 py39h06a4308_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39h7f8727e_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39hd23ed53_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 h7f8727e_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39h295c915_0 cytoolz 0.11.0 py39h27cfd23_0 daal4py 2021.5.0 py39h78b71dc_0 dal 2021.5.1 h06a4308_803 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39h06a4308_1 dbus 1.13.18 hb2f20db_0 debugpy 1.5.1 py39h295c915_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39h06a4308_1 entrypoints 0.4 py39h06a4308_0 et_xmlfile 1.1.0 py39h06a4308_0 executing 0.8.3 pyhd3eb1b0_0 expat 2.4.4 h295c915_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fontconfig 2.13.1 h6c09931_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 h70c0345_0 frozenlist 1.2.0 py39h7f8727e_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39h06a4308_1 gensim 4.1.2 py39h295c915_0 giflib 5.2.1 h7b6447c_0 glib 2.69.1 h4ff587b_1 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h2531618_2 gmpy2 2.1.2 py39heeb90bb_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h27cfd23_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39h06a4308_0 greenlet 1.1.1 py39h295c915_0 grpcio 1.42.0 py39hce63b2e_0 gst-plugins-base 1.14.0 h8213a91_2 gstreamer 1.14.0 h28cd5cc_2 h5py 3.6.0 py39ha0f2276_0 hdf5 1.10.6 hb1b8bf9_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 he6710b0_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39h4cda21f_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39h06a4308_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39h06a4308_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 h06a4308_3561 intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39h06a4308_0 ipython 8.2.0 py39h06a4308_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39h06a4308_1 jeepney 0.7.1 pyhd3eb1b0_0 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e h7f8727e_0 jq 1.6 h27cfd23_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39h06a4308_0 jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 h7b6447c_2 keyring 23.4.0 py39h06a4308_0 kiwisolver 1.3.2 py39h295c915_0 krb5 1.19.2 hac12032_0 lazy-object-proxy 1.6.0 py39h27cfd23_0 lcms2 2.12 h3be6417_0 ld_impl_linux-64 2.35.1 h7274673_9 lerc 3.0 h295c915_0 libaec 1.0.4 he6710b0_1 libarchive 3.4.2 h62408e4_0 libcrc32c 1.1.1 he6710b0_2 libcurl 7.82.0 h0b77cf5_0 libdeflate 1.8 h7f8727e_5 libedit 3.1.20210910 h7f8727e_0 libev 4.33 h7f8727e_1 libffi 3.3 he6710b0_2 libgcc 7.2.0 h69d50b8_2 libgcc-ng 9.3.0 h5101ec6_17 libgfortran-ng 7.5.0 ha8ba4b0_17 libgfortran4 7.5.0 ha8ba4b0_17 libgomp 9.3.0 h5101ec6_17 libidn2 2.3.2 h7f8727e_0 liblief 0.11.5 h295c915_1 libllvm11 11.1.0 h3826bc1_1 libnghttp2 1.46.0 hce63b2e_0 libpng 1.6.37 hbc83047_0 libprotobuf 3.19.1 h4ff587b_0 libsodium 1.0.18 h7b6447c_0 libspatialindex 1.9.3 h2531618_0 libssh2 1.10.0 h8f2d780_0 libstdcxx-ng 9.3.0 hd4cf53a_17 libtiff 4.2.0 h85742a9_0 libunistring 0.9.10 h27cfd23_0 libuuid 1.0.3 h7f8727e_2 libwebp 1.2.2 h55f646e_0 libwebp-base 1.2.2 h7f8727e_0 libxcb 1.14 h7b6447c_0 libxml2 2.9.12 h03d6c58_0 libxslt 1.1.34 hc22bd24_0 libzopfli 1.0.3 he6710b0_0 llvmlite 0.38.0 py39h4ff587b_0 locket 0.2.1 py39h06a4308_2 lxml 4.8.0 py39h1f438cf_0 lz4-c 1.9.3 h295c915_1 lzo 2.10 h7b6447c_2 markdown 3.3.4 py39h06a4308_0 markupsafe 2.0.1 py39h27cfd23_0 matplotlib 3.5.1 py39h06a4308_1 matplotlib-base 3.5.1 py39ha18d171_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39h06a4308_1 mistune 0.8.4 py39h27cfd23_1000 mkl 2021.4.0 h06a4308_640 mkl-service 2.4.0 py39h7f8727e_0 mkl_fft 1.3.1 py39hd3c417c_0 mkl_random 1.2.2 py39h51133e4_0 mock 4.0.3 pyhd3eb1b0_0 mpc 1.1.0 h10f8cd9_1 mpfr 4.0.2 hb69a4c5_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39h06a4308_0 msgpack-python 1.0.2 py39hff7bd54_1 multidict 5.2.0 py39h7f8727e_2 multipledispatch 0.6.0 py39h06a4308_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39h06a4308_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39h06a4308_0 nbconvert 6.4.4 py39h06a4308_0 nbformat 5.3.0 py39h06a4308_0 ncurses 6.3 h7f8727e_2 nest-asyncio 1.5.5 py39h06a4308_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 6.11.2 h3db8ef7_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39h06a4308_0 numba 0.55.1 py39h51133e4_0 numexpr 2.8.1 py39h6abb31d_0 numpy 1.21.5 py39he7a7128_1 numpy-base 1.21.5 py39hf524024_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h27cfd23_0 openjpeg 2.4.0 h3ad879b_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n h7f8727e_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39h295c915_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39h06a4308_0 param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39h06a4308_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 patchelf 0.13 h295c915_0 pathspec 0.7.0 py_0 patsy 0.5.2 py39h06a4308_1 pcre 8.45 h295c915_0 pep8 1.7.1 py39h06a4308_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39h22f2fdc_0 pip 21.2.4 py39h06a4308_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39h06a4308_1 poyo 0.5.0 pyhd3eb1b0_0 prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39h295c915_0 psutil 5.8.0 py39h27cfd23_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39h295c915_1 pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h27cfd23_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39h06a4308_0 pycurl 7.44.1 py39h8f2d780_1 pydispatcher 2.0.5 py39h06a4308_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h27cfd23_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39h06a4308_0 pylint 2.9.6 py39h06a4308_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39h295c915_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h2531618_6 pyrsistent 0.18.0 py39heee7806_0 pysocks 1.7.1 py39h06a4308_0 pytables 3.6.1 py39h77479fe_1 pytest 7.1.1 py39h06a4308_0 python 3.9.12 h12debd9_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h2531618_3 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39h7f8727e_0 pyxdg 0.27 pyhd3eb1b0_0 pyyaml 6.0 py39h7f8727e_1 pyzmq 22.3.0 py39h295c915_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h5867ecd_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39h06a4308_0 readline 8.1.2 h7f8727e_1 regex 2022.3.15 py39h7f8727e_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39h06a4308_1 ruamel_yaml 0.15.100 py39h27cfd23_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39h51133e4_0 scikit-learn 1.0.2 py39h51133e4_1 scikit-learn-intelex 2021.5.0 py39h06a4308_0 scipy 1.7.3 py39hc147768_0 scrapy 2.6.1 py39h06a4308_0 seaborn 0.11.2 pyhd3eb1b0_0 secretstorage 3.3.1 py39h06a4308_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39h06a4308_0 sip 4.19.13 py39h295c915_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 h295c915_0 sniffio 1.2.0 py39h06a4308_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39h06a4308_1 spyder-kernels 2.1.3 py39h06a4308_0 sqlalchemy 1.4.32 py39h7f8727e_0 sqlite 3.38.2 hc218d9a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39h7f8727e_0 sympy 1.10.1 py39h06a4308_0 tabulate 0.8.9 py39h06a4308_0 tbb 2021.5.0 hd09550d_0 tbb4py 2021.5.0 py39hd09550d_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39h06a4308_0 terminado 0.13.1 py39h06a4308_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h1ccaba5_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h27cfd23_0 tqdm 4.64.0 py39h06a4308_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39h7f8727e_0 typed-ast 1.4.3 py39h7f8727e_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39h295c915_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 h7b6447c_0 urllib3 1.26.9 py39h06a4308_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h06a4308_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39h06a4308_1 websocket-client 0.58.0 py39h06a4308_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h0b77cf5_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39h06a4308_0 wrapt 1.12.1 py39he8ac12f_1 wurlitzer 3.0.2 py39h06a4308_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xz 5.2.5 h7b6447c_0 yaml 0.2.5 h7b6447c_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h27cfd23_0 zeromq 4.3.4 h2531618_0 zfp 0.5.5 h295c915_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h7f8727e_2 zope 1.0 py39h06a4308_1 zope.interface 5.4.0 py39h7f8727e_0 zstd 1.4.9 haebb681_0 . My Environment . env . SHELL=/bin/bash PYTHONUNBUFFERED=1 CONDA_EXE=/home/nsk1207/anaconda3/bin/conda _CE_M= APPLICATION_INSIGHTS_NO_DIAGNOSTIC_CHANNEL=1 WSL_DISTRO_NAME=Ubuntu ELECTRON_RUN_AS_NODE=1 VSCODE_AMD_ENTRYPOINT=vs/workbench/api/node/extensionHostProcess NAME=Code PWD=/home/nsk1207/fastpages_nathan/_notebooks LOGNAME=nsk1207 CONDA_PREFIX=/home/nsk1207/anaconda3 HOME=/home/nsk1207 LANG=C.UTF-8 WSL_INTEROP=/run/WSL/307_interop LS_COLORS=rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36: WAYLAND_DISPLAY=wayland-0 CONDA_PROMPT_MODIFIER=(base) PYDEVD_USE_FRAME_EVAL=NO LESSCLOSE=/usr/bin/lesspipe %s %s VSCODE_HANDLES_SIGPIPE=true TERM=xterm-256color _CE_CONDA= LESSOPEN=| /usr/bin/lesspipe %s USER=nsk1207 PYTHONIOENCODING=utf-8 CONDA_SHLVL=1 DISPLAY=:0 SHLVL=2 PAGER=cat VSCODE_CWD=/mnt/c/Users/nshki/AppData/Local/Programs/Microsoft VS Code CONDA_PYTHON_EXE=/home/nsk1207/anaconda3/bin/python XDG_RUNTIME_DIR=/mnt/wslg/runtime-dir PS1=[PEXP [ ]ECT_PROMPT&gt; CONDA_DEFAULT_ENV=base WSLENV=ELECTRON_RUN_AS_NODE/w: VSCODE_WSL_EXT_LOCATION=/mnt/c/Users/nshki/.vscode/extensions/ms-vscode-remote.remote-wsl-0.66.3 XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop PATH=/home/nsk1207/.vscode-server/bin/e4503b30fc78200f846c62cf8091b76ff5547662/bin/remote-cli:/home/nsk1207/.local/bin:/home/nsk1207/anaconda3/bin:/home/nsk1207/anaconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/usr/lib/wsl/lib:/mnt/c/Windows/system32:/mnt/c/Windows:/mnt/c/Windows/System32/Wbem:/mnt/c/Windows/System32/WindowsPowerShell/v1.0:/mnt/c/Windows/System32/OpenSSH:/mnt/c/Program Files/dotnet:/mnt/c/Program Files/Git/cmd:/mnt/c/Users/nshki/AppData/Local/Microsoft/WindowsApps:/mnt/c/Users/nshki/AppData/Local/Programs/Microsoft VS Code/bin:/snap/bin VSCODE_NLS_CONFIG={&#34;locale&#34;:&#34;en&#34;,&#34;availableLanguages&#34;:{}} HOSTTYPE=x86_64 PULSE_SERVER=/mnt/wslg/PulseServer VSCODE_HANDLES_UNCAUGHT_ERRORS=true VSCODE_IPC_HOOK_CLI=/mnt/wslg/runtime-dir/vscode-ipc-1e9d9788-7996-44f0-80eb-a39c0f839876.sock _=/usr/bin/env . Jupyter Version Check . jupyter --version jupyter kernelspec list . Selected Jupyter core packages... IPython : 8.4.0 ipykernel : 6.15.1 ipywidgets : not installed jupyter_client : 7.3.4 jupyter_core : 4.11.1 jupyter_server : not installed jupyterlab : not installed nbclient : not installed nbconvert : not installed nbformat : not installed notebook : not installed qtconsole : not installed traitlets : 5.3.0 Available kernels: bash /home/nsk1207/.local/share/jupyter/kernels/bash javascript /home/nsk1207/.local/share/jupyter/kernels/javascript python3 /home/nsk1207/.local/share/jupyter/kernels/python3 .",
            "url": "https://nsk1207.github.io/fastpages_nathan/week1/jupyter/2022/08/28/tool_check.html",
            "relUrl": "/week1/jupyter/2022/08/28/tool_check.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "APCSP - Vocab Quiz Code",
            "content": "Print question and return user input . import getpass, sys # Print question and return user input def question_with_response(num, prompt): if num &gt; 0: print(&quot;Question &quot; + str(num) + &quot;: &quot; + prompt) else: print(&quot;Question: &quot; + prompt) msg = input() return msg . Number of questions and correct answer counter . questions = 7 # Correct answer counter correct = 0 . Intro . print(&#39;Hello everyone!, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) rsp = question_with_response(0, &quot;Let&#39;s see how smart you are! Ready to take a quiz?&quot;) if rsp == &quot;no&quot;: print(&quot;Sorry, you must take it!&quot;) correct += 1 else: print(&quot;Okay!&quot;) . Hello everyone!, nsk1207 running /bin/python3 You will be asked 7 questions. Question: Let&#39;s see how smart you are! Ready to take a quiz? Okay! . Start questions . rsp = question_with_response(1, &quot;What command is used to include other functions that are developed?&quot;) if rsp == &quot;import&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(2, &quot;What command in this example is used to evaluate a response?&quot;) if rsp == &quot;if&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(3, &quot;Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition?&quot;) if rsp == &quot;expression&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(4, &quot;What is two or more lines of code called?&quot;) if rsp == &quot;sequence&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(5, &quot;What is the dynamic result of the input command?&quot;) if rsp == &quot;msg&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(6, &quot;What is a keyword in Python that defines a function?&quot;) if rsp == &quot;def&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(7, &quot;What is it called when you group a sequence of commands (often repeatedly)&quot;) if rsp == &quot;procedural abstraction&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) . Question 1: What command is used to include other functions that are developed? import is correct! Question 2: What command in this example is used to evaluate a response? if is correct! Question 3: Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition? if is incorrect! Question 4: What is two or more lines of code called? sequence is correct! Question 5: What is the dynamic result of the input command? if is incorrect! Question 6: What is a keyword in Python that defines a function? def is correct! Question 7: What is it called when you group a sequence of commands (often repeatedly) procedural abstraction is correct! . Calculate percentage and results . q_percent = 100 * correct / questions formatted_q_percent = &quot;{:.0f}&quot;.format(q_percent) # Rounding # Results print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions) + &quot; or &quot; + str(formatted_q_percent) + &quot;%&quot;) . nsk1207 you scored 5/7 or 71% .",
            "url": "https://nsk1207.github.io/fastpages_nathan/week1/jupyter/2022/08/28/quiz.html",
            "relUrl": "/week1/jupyter/2022/08/28/quiz.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "APCSP - Vocab Quiz Description",
            "content": "Vocab quiz . For my quiz, there are 7 different questions. Each is worth 1 point and at the end, the quiz will tell the score. I added the 3 questions Mr. Mortenson had + 4 new questions. I will now explain some of the things I added to my quiz code. At the start, I added a numbering system because I thought it would look organized. In addition, I was able to calculate the fraction score into a percentage that is rounded to the nearest integer number. . Click here for link .",
            "url": "https://nsk1207.github.io/fastpages_nathan/week1/markdown/2022/08/28/Quiz.html",
            "relUrl": "/week1/markdown/2022/08/28/Quiz.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "Other Subjects",
            "content": "Other Subjects . AP Calc AB Calendar | AP Physics First Lab | APEL Calendar | US History Activity | .",
            "url": "https://nsk1207.github.io/fastpages_nathan/week1/markdown/2022/08/28/My-Other-Subjects.html",
            "relUrl": "/week1/markdown/2022/08/28/My-Other-Subjects.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "APCSP - "Hello"",
            "content": "print(&quot;Hello Del Norte High School!!!&quot;) . Hello Del Norte High School .",
            "url": "https://nsk1207.github.io/fastpages_nathan/week0/jupyter/2022/08/20/Nathan_nb.html",
            "relUrl": "/week0/jupyter/2022/08/20/Nathan_nb.html",
            "date": " • Aug 20, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "APCSP - Nathan's Markdown Page",
            "content": "Markdown Posts . This is me in vscode . .",
            "url": "https://nsk1207.github.io/fastpages_nathan/week0/markdown/2022/08/20/Nathan.html",
            "relUrl": "/week0/markdown/2022/08/20/Nathan.html",
            "date": " • Aug 20, 2022"
        }
        
    
  

  
  
      ,"page0": {
          "title": "About Me",
          "content": "I am a junior at Del Norte High school and I am in Computer Science Princples. I am interested in computer science and I can’t wait to learn a lot of new things. You can find my team below. . . Name Email . Nathan Kim | nsh.kim@gmail.com | Alyssa Ringler | alyssar60819@gmail.com | Sri Kotturi | srihita.kotturi@gmail.com | Max Wu | maxw37962@gmail.com | .",
          "url": "https://nsk1207.github.io/fastpages_nathan/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page1": {
          "title": "Vocab",
          "content": "Terms, Ideas, etc. . sequence - two or more lines of code | jupyter notebook - can run and write out certain code | import - includes other functions that were previously developed | input - things put into the computer | output - what the computer gives back | key: value (example -name: Nathan) | def in python - defines a function | if - evaluates if code meets requirement | expression - the condition that must be met in the if statement | .",
          "url": "https://nsk1207.github.io/fastpages_nathan/Vocab/",
          "relUrl": "/Vocab/",
          "date": ""
      }
      
  

  

  

  
      ,"page4": {
          "title": "Java Script",
          "content": "Javascript Basics w/ table | Javascript Personal Use | Random Number Generator | .",
          "url": "https://nsk1207.github.io/fastpages_nathan/JavaScript/",
          "relUrl": "/JavaScript/",
          "date": ""
      }
      
  

  

  

  
  

  
  

  
  

  
  

  

  
  

  
      ,"page13": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://nsk1207.github.io/fastpages_nathan/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}