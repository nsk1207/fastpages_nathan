<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://nsk1207.github.io/fastpages_nathan/feed.xml" rel="self" type="application/atom+xml" /><link href="https://nsk1207.github.io/fastpages_nathan/" rel="alternate" type="text/html" /><updated>2023-01-14T13:50:29-06:00</updated><id>https://nsk1207.github.io/fastpages_nathan/feed.xml</id><title type="html">Nathan’s Blog</title><subtitle>My webpage!</subtitle><entry><title type="html">Pbl Model</title><link href="https://nsk1207.github.io/fastpages_nathan/2023/01/10/PBL-model.ipynb" rel="alternate" type="text/html" title="Pbl Model" /><published>2023-01-10T00:00:00-06:00</published><updated>2023-01-10T00:00:00-06:00</updated><id>https://nsk1207.github.io/fastpages_nathan/2023/01/10/PBL-model</id><author><name></name></author><summary type="html"><![CDATA[{ "cells": [ { "attachments": {}, "cell_type": "markdown", "metadata": {}, "source": [ "# Model and Object-Oriented Programming\n", "> Object Oriented Programming is a part of learning Python. The objective of this blog is to introduce OOP with the intention of PBL task to create a database. The foundations for a database is defining a Class and understanding instance data and methods. A database is often a focus of backend coding as it will store persistent data, that can be recalled after the immediate session is closed.\n", "\n", "- title: Model and Object-Oriented Programming\n", "- toc: true\n", "- categories: []\n", "- image: /images/python.png\n", "- type: pbl\n", "- week: 18" ] }, { "attachments": {}, "cell_type": "markdown", "metadata": {}, "source": [ "## Class and Object Terms\n", "> The foundations of Object-Oriented Programming is defining a ***Class*** \n", "* In Object-Oriented Programming (OOP), a class is a blueprint for creating an ***Object***. (a data structure). An Object is used like many other Python variables.\n", "* A Class has ...\n", " * a collection of data, these are called ***Attributes*** and in Python are pre-fixed using the keyword ***self***\n", " * a collection of Functions/Procedures. These are called ***Methods** when they exist inside a Class definition.\n", "* An Object is created from the Class/Template. Characteristics of objects ...\n", " * an Object is an ***Instance*** of the Class/Template\n", " * there can be many Objects created from the same Class\n", " * each Object contains its own ***Instance Data***\n", " * the data is setup by the ***Constructor***, this is the \"__init__\" method in a Python class\n", " * all methods in the Class/Template become part of the Object, methods are accessed using ***dot notation*** (object.method())\n", "* A Python Class allow for the definition of @ decorators, these allow access to instance data without the use of functions ...\n", " * @property decorator (aka getter). This enables developers to reference/get instance data in a shorthand fashion (object.name versus object.get_name())\n", " * @name.setter decorator (aka setter). This enables developers to update/set instance data in a shorthand fashion (object.name = \"John\" versus object.set_name(\"John\"))\n", " * observe all instance data (self._name, self._email ...) are prefixed with \"_\", this convention allows setters and getters to work with more natural variable name (name, email ...)" ] }, { "cell_type": "markdown", "metadata": {}, "source": [ "## Class and Object Code" ] }, { "cell_type": "code", "execution_count": 17, "metadata": {}, "outputs": [ { "name": "stdout", "output_type": "stream", "text": [ "Test 1, find user 3\n", "name: \"Thomas Edison\", id: \"toby\", psw: \"sha256$VZ6...\"\n", "name: \"Nicholas Tesla\", id: \"nick\", psw: \"sha256$5mG...\"\n", "* name: \"Alexander Graham Bell\", id: \"lex\", psw: \"sha256$50p...\"\n", "name: \"Eli Whitney\", id: \"eli\", psw: \"sha256$qpx...\"\n", "name: \"Hedy Lemarr\", id: \"hedy\", psw: \"sha256$Qrr...\"\n", "Test 2, change user 3\n", "name: \"Thomas Edison\", id: \"toby\", psw: \"sha256$VZ6...\"\n", "name: \"Nicholas Tesla\", id: \"nick\", psw: \"sha256$5mG...\"\n", "* name: \"John Mortensen\", id: \"jm1021\", psw: \"sha256$rXF...\"\n", "name: \"Eli Whitney\", id: \"eli\", psw: \"sha256$qpx...\"\n", "name: \"Hedy Lemarr\", id: \"hedy\", psw: \"sha256$Qrr...\"\n", "Test 3, make a dictionary\n", "[{\"_name\": \"Thomas Edison\", \"_uid\": \"toby\", \"_password\": \"sha256$VZ6YE3wOIKULazyt$67f2b4ad2470130819590b895b77c0dc593c2c0a1f1d0cbb6f716b250ebc7b9c\"}, {\"_name\": \"Nicholas Tesla\", \"_uid\": \"nick\", \"_password\": \"sha256$5mGpLjBkE8isXPtN$2818a6d2924984c1064a835ef291304fe2157c3019ac84be00b928e7882b90f9\"}, {\"_name\": \"John Mortensen\", \"_uid\": \"jm1021\", \"_password\": \"sha256$rXFrLFStOrylsCS5$c00b00b23720c426299a68f67be0a31d80b4181de13ddf549d6e07b7a293bec5\"}, {\"_name\": \"Eli Whitney\", \"_uid\": \"eli\", \"_password\": \"sha256$qpxtmahbzDD5kLpc$9e26c77bd2811f27f554ddecd36a6bf24a805e1936627c10e05ee1ba3e508bd0\"}, {\"_name\": \"Hedy Lemarr\", \"_uid\": \"hedy\", \"_password\": \"sha256$QrriRqg3xp5GNkFQ$ea6642c3ad6db03094bb69e72b42f6d78e816ff3f3ead8f90da702580cecb151\"}]\n", "Test 4, make a dictionary\n", "[{\"_name\": \"Thomas Edison\", \"_uid\": \"toby\", \"_password\": \"sha256$VZ6YE3wOIKULazyt$67f2b4ad2470130819590b895b77c0dc593c2c0a1f1d0cbb6f716b250ebc7b9c\"}, {\"_name\": \"Nicholas Tesla\", \"_uid\": \"nick\", \"_password\": \"sha256$5mGpLjBkE8isXPtN$2818a6d2924984c1064a835ef291304fe2157c3019ac84be00b928e7882b90f9\"}, {\"_name\": \"John Mortensen\", \"_uid\": \"jm1021\", \"_password\": \"sha256$rXFrLFStOrylsCS5$c00b00b23720c426299a68f67be0a31d80b4181de13ddf549d6e07b7a293bec5\"}, {\"_name\": \"Eli Whitney\", \"_uid\": \"eli\", \"_password\": \"sha256$qpxtmahbzDD5kLpc$9e26c77bd2811f27f554ddecd36a6bf24a805e1936627c10e05ee1ba3e508bd0\"}, {\"_name\": \"Hedy Lemarr\", \"_uid\": \"hedy\", \"_password\": \"sha256$QrriRqg3xp5GNkFQ$ea6642c3ad6db03094bb69e72b42f6d78e816ff3f3ead8f90da702580cecb151\"}]\n" ] } ], "source": [ "#\n", "# Werkzeug is a collection of libraries that can be used to create a WSGI (Web Server Gateway Interface)\n", "# A gateway in necessary as a web server cannot communicate directly with Python.\n", "# In this case, imports are focused on generating hash code to protect passwords.\n", "from werkzeug.security import generate_password_hash, check_password_hash\n", "import json\n", "\n", "# Define a User Class/Template\n", "# -- A User represents the data we want to manage\n", "class User: \n", " # constructor of a User object, initializes the instance variables within object (self)\n", " def __init__(self, name, uid, password):\n", " self._name = name # variables with self prefix become part of the object, \n", " self._uid = uid\n", " self.set_password(password)\n", "\n", " # a name getter method, extracts name from object\n", " @property\n", " def name(self):\n", " return self._name\n", " \n", " # a setter function, allows name to be updated after initial object creation\n", " @name.setter\n", " def name(self, name):\n", " self._name = name\n", " \n", " # a getter method, extracts email from object\n", " @property\n", " def uid(self):\n", " return self._uid\n", " \n", " # a setter function, allows name to be updated after initial object creation\n", " @uid.setter\n", " def uid(self, uid):\n", " self._uid = uid\n", " \n", " # check if uid parameter matches user id in object, return boolean\n", " def is_uid(self, uid):\n", " return self._uid == uid\n", " \n", " @property\n", " def password(self):\n", " return self._password[0:10] + \"...\" # because of security only show 1st characters\n", "\n", " # update password, this is conventional setter\n", " def set_password(self, password):\n", " \"\"\"Create a hashed password.\"\"\"\n", " self._password = generate_password_hash(password, method='sha256')\n", "\n", " # check password parameter versus stored/encrypted password\n", " def is_password(self, password):\n", " \"\"\"Check against hashed password.\"\"\"\n", " result = check_password_hash(self._password, password)\n", " return result\n", " \n", " # output content using str(object) in human readable form, uses getter\n", " def __str__(self):\n", " return f'name: \"{self.name}\", id: \"{self.uid}\", psw: \"{self.password}\"'\n", "\n", " # output command to recreate the object, uses attribute directly\n", " def __repr__(self):\n", " return f'Person(name={self._name}, uid={self._uid}, password={self._password})'\n", " \n", " def __dir__(self):\n", " return [\"name\", \"uid\"]\n", "\n", "\n", "# tester method to print users\n", "def tester(users, uid, psw):\n", " result = None\n", " for user in users:\n", " # test for match in database\n", " if user.uid == uid and user.is_password(psw): # check for match\n", " print(\"* \", end=\"\")\n", " result = user\n", " # print using __str__ method\n", " print(str(user))\n", " return result\n", " \n", "\n", "# place tester code inside of special if! This allows include without tester running\n", "if __name__ == \"__main__\":\n", "\n", " # define user objects\n", " u1 = User(name='Thomas Edison', uid='toby', password='123toby')\n", " u2 = User(name='Nicholas Tesla', uid='nick', password='123nick')\n", " u3 = User(name='Alexander Graham Bell', uid='lex', password='123lex')\n", " u4 = User(name='Eli Whitney', uid='eli', password='123eli')\n", " u5 = User(name='Hedy Lemarr', uid='hedy', password='123hedy')\n", "\n", " # put user objects in list for convenience\n", " users = [u1, u2, u3, u4, u5]\n", "\n", " # Find user\n", " print(\"Test 1, find user 3\")\n", " u = tester(users, u3.uid, \"123lex\")\n", "\n", "\n", " # Change user\n", " print(\"Test 2, change user 3\")\n", " u.name = \"John Mortensen\"\n", " u.uid = \"jm1021\"\n", " u.set_password(\"123qwerty\")\n", " u = tester(users, u.uid, \"123qwerty\")\n", "\n", "\n", " # Make dictionary\n", " ''' \n", " The __dict__ in Python represents a dictionary or any mapping object that is used to store the attributes of the object. \n", " Every object in Python has an attribute that is denoted by __dict__. \n", " Use the json.dumps() method to convert the list of Users to a JSON string.\n", " '''\n", " print(\"Test 3, make a dictionary\")\n", " json_string = json.dumps([user.__dict__ for user in users]) \n", " print(json_string)\n", "\n", " print(\"Test 4, make a dictionary\")\n", " json_string = json.dumps([vars(user) for user in users]) \n", " print(json_string)\n", " " ] }, { "attachments": {}, "cell_type": "markdown", "metadata": {}, "source": [ "## Hacks\n", "> Add new attributes/variables to the Class. Make class specific to your CPT work.\n", "- Add classOf attribute to define year of graduation\n", " - Add setter and getter for classOf\n", "- Add dob attribute to define date of birth\n", " - This will require investigation into Python datetime objects as shown in example code below\n", " - Add setter and getter for dob\n", "- Add instance variable for age, make sure if dob changes age changes\n", " - Add getter for age, but don't add/allow setter for age\n", "- Update and format tester function to work with changes\n", "\n", "> Start a class design for each of your own Full Stack CPT sections of your project\n", "- Use new `code cell` in this notebook\n", "- Define _init_ and self attributes\n", "- Define setters and getters\n", "- Make a tester" ] }, { "cell_type": "markdown", "metadata": {}, "source": [ "## Start Code for Hacks" ] }, { "cell_type": "code", "execution_count": null, "metadata": {}, "outputs": [], "source": [ "from datetime import date\n", "\n", "def calculate_age(born):\n", " today = date.today()\n", " return today.year - born.year - ((today.month, today.day) This ended up being harder than anticipated, complete hacks from this update." ] }, { "cell_type": "code", "execution_count": 23, "metadata": {}, "outputs": [ { "name": "stdout", "output_type": "stream", "text": [ "JSON ready string:\n", " {\"name\": \"Thomas Edison\", \"uid\": \"toby\", \"dob\": \"02-11-1847\", \"age\": 175} \n", "\n", "Raw Variables of object:\n", " {'_name': 'Thomas Edison', '_uid': 'toby', '_password': 'sha256$dBncgmYQ6KfvH4Uj$d1330a19a97f1af9262576651e59fa257dc1649cd94a91fa0c097de3795f9940', '_dob': datetime.date(1847, 2, 11)} \n", "\n", "Raw Attributes and Methods of object:\n", " ['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_dob', '_name', '_password', '_uid', 'age', 'dictionary', 'dob', 'is_password', 'is_uid', 'name', 'set_password', 'uid'] \n", "\n", "Representation to Re-Create the object:\n", " Person(name=Thomas Edison, uid=toby, password=sha256$dBncgmYQ6KfvH4Uj$d1330a19a97f1af9262576651e59fa257dc1649cd94a91fa0c097de3795f9940,dob=1847-02-11) \n", "\n" ] } ], "source": [ "from werkzeug.security import generate_password_hash, check_password_hash\n", "from datetime import date\n", "import json\n", "\n", "class User: \n", "\n", " def __init__(self, name, uid, password, dob):\n", " self._name = name # variables with self prefix become part of the object, \n", " self._uid = uid\n", " self.set_password(password)\n", " self._dob = dob\n", " \n", " @property\n", " def name(self):\n", " return self._name\n", " \n", " # a setter function, allows name to be updated after initial object creation\n", " @name.setter\n", " def name(self, name):\n", " self._name = name\n", " \n", " # a getter method, extracts email from object\n", " @property\n", " def uid(self):\n", " return self._uid\n", " \n", " # a setter function, allows name to be updated after initial object creation\n", " @uid.setter\n", " def uid(self, uid):\n", " self._uid = uid\n", " \n", " # check if uid parameter matches user id in object, return boolean\n", " def is_uid(self, uid):\n", " return self._uid == uid\n", " \n", " # dob property is returned as string, to avoid unfriendly outcomes\n", " @property\n", " def dob(self):\n", " dob_string = self._dob.strftime('%m-%d-%Y')\n", " return dob_string\n", " \n", " # dob should be have verification for type date\n", " @dob.setter\n", " def dob(self, dob):\n", " self._dob = dob\n", " \n", " # age is calculated and returned each time it is accessed\n", " @property\n", " def age(self):\n", " today = date.today()\n", " return today.year - self._dob.year - ((today.month, today.day) < (self._dob.month, self._dob.day))\n", " \n", " # dictionary is customized, removing password for security purposes\n", " @property\n", " def dictionary(self):\n", " dict = {\n", " \"name\" : self.name,\n", " \"uid\" : self.uid,\n", " \"dob\" : self.dob,\n", " \"age\" : self.age\n", " }\n", " return dict\n", " \n", " # update password, this is conventional setter\n", " def set_password(self, password):\n", " \"\"\"Create a hashed password.\"\"\"\n", " self._password = generate_password_hash(password, method='sha256')\n", "\n", " # check password parameter versus stored/encrypted password\n", " def is_password(self, password):\n", " \"\"\"Check against hashed password.\"\"\"\n", " result = check_password_hash(self._password, password)\n", " return result\n", " \n", " # output content using json dumps, this is ready for API response\n", " def __str__(self):\n", " return json.dumps(self.dictionary)\n", " \n", " # output command to recreate the object, uses attribute directly\n", " def __repr__(self):\n", " return f'User(name={self._name}, uid={self._uid}, password={self._password},dob={self._dob})'\n", " \n", "\n", "if __name__ == \"__main__\":\n", " u1 = User(name='Thomas Edison', uid='toby', password='123toby', dob=date(1847, 2, 11))\n", " print(\"JSON ready string:\\n\", u1, \"\\n\") \n", " print(\"Raw Variables of object:\\n\", vars(u1), \"\\n\") \n", " print(\"Raw Attributes and Methods of object:\\n\", dir(u1), \"\\n\")\n", " print(\"Representation to Re-Create the object:\\n\", repr(u1), \"\\n\") \n" ] }, { "cell_type": "markdown", "metadata": {}, "source": [] } ], "metadata": { "kernelspec": { "display_name": "Python 3.9.12 ('base')", "language": "python", "name": "python3" }, "language_info": { "codemirror_mode": { "name": "ipython", "version": 3 }, "file_extension": ".py", "mimetype": "text/x-python", "name": "python", "nbconvert_exporter": "python", "pygments_lexer": "ipython3", "version": "3.9.12" }, "orig_nbformat": 4, "vscode": { "interpreter": { "hash": "8b82d5009c68ba5675978267e2b13a671f2a7143d61273c5a3813c97e0b2493d" } } }, "nbformat": 4, "nbformat_minor": 2 }]]></summary></entry><entry><title type="html">Grading Performance Tasks Week 2</title><link href="https://nsk1207.github.io/fastpages_nathan/week18/2023/01/09/performancetaskgrading.html" rel="alternate" type="text/html" title="Grading Performance Tasks Week 2" /><published>2023-01-09T00:00:00-06:00</published><updated>2023-01-09T00:00:00-06:00</updated><id>https://nsk1207.github.io/fastpages_nathan/week18/2023/01/09/performancetaskgrading</id><author><name></name></author><category term="week18" /><summary type="html"><![CDATA[Week 2 Performance Task Grading]]></summary></entry><entry><title type="html">Homework 3.17 - 3.18</title><link href="https://nsk1207.github.io/fastpages_nathan/homework1718" rel="alternate" type="text/html" title="Homework 3.17 - 3.18" /><published>2022-12-14T00:00:00-06:00</published><updated>2022-12-14T00:00:00-06:00</updated><id>https://nsk1207.github.io/fastpages_nathan/hw</id><author><name></name></author><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Speaker Notes 12/13</title><link href="https://nsk1207.github.io/fastpages_nathan/frontend/speakernotes" rel="alternate" type="text/html" title="Speaker Notes 12/13" /><published>2022-12-13T00:00:00-06:00</published><updated>2022-12-13T00:00:00-06:00</updated><id>https://nsk1207.github.io/fastpages_nathan/frontend/speakernotes</id><author><name></name></author><category term="fastpages" /><summary type="html"><![CDATA[Kathyleen Beveridge worked at qualcomm with Mr Mortenson mvoed abroad in Spain during graduate school; said it changed her life forever has a finance degree at santa clara and nba at usc favorite statement: “My mission in life is not merely to survive, but to thrive; and to do so with some passion, some compassion, some humor, and some style.” - Mary Angelou not initially in high tech Qualcomm Mission Statement: Inventing the tech the world loves HP Inc Mission Statement: Create technology that makes life better for everyone, everywhere Thermo Fisher Scientific Mission Statement: Enable our customers to make the world healthier, cleaner, and safer at one point, QUalcomm chips were in 99% were in people billion peoples lives were impacted by Qualcomm Thermo Fisher stats/information 100000+ collegues 7000 engineers and scientists 1.5 billion invented in research 40 billion in revenue also initilized scrum roles like in our class (Scrum master, backened, frontend, DevOps) they would give their opinions on products before it’s realesed or commerizilezed]]></summary></entry><entry><title type="html">Unit 3 Lesson 16, Student Copy</title><link href="https://nsk1207.github.io/fastpages_nathan/2022/12/12/hw.html" rel="alternate" type="text/html" title="Unit 3 Lesson 16, Student Copy" /><published>2022-12-12T00:00:00-06:00</published><updated>2022-12-12T00:00:00-06:00</updated><id>https://nsk1207.github.io/fastpages_nathan/2022/12/12/hw</id><author><name></name></author><summary type="html"><![CDATA[]]></summary></entry></feed>